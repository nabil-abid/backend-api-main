name: Pipeline backend

on:
    push:
        branches: [master, main, develop]
           
env:
    IMAGE_NAME: abid127/backend-api
    BUILD_NUMBER: ${{ github.run_number }}
    #SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
    unit-test:
        runs-on: ubuntu-latest
        steps:
            - name: checkout
              uses: actions/checkout@v4

            - name: install dependencies
              run: npm i

            - name: Unit Test
              run: |
                rm -rf test-report
                mkdir test-report
                npm run test -- --json --outputFile=test-report/test-report.json
              continue-on-error: true

            - name: upload Artifact
              uses: actions/upload-artifact@v4
              with:
                name: Jest-Report
                path: test-report/test-report.json
               
            - name: Check test results and fail if tests failed
              id: check-tests
              run: |
                # Simple check using Node.js to see if the tests failed
                node -e "
                const fs = require('fs');
                const report = JSON.parse(fs.readFileSync('test-report/test-report.json'));
                if (report.success === false || report.numFailedTests > 0) {
                  console.error('::error::Tests failed. Stopping workflow.');
                  process.exit(1);
                }
                "

          

    build-and-push:
        runs-on: ubuntu-latest
        needs: unit-test
        steps:
            - name: Notify Build Start
              uses: act10ns/slack@v2
              with:
                status: starting
                message: |
                    *Docker Build Started*
                    Building image ${{ env.IMAGE_NAME }}
                    Branch: ${{ github.ref }}
                    Run Number: ${{ env.BUILD_NUMBER }}

            - name: checkout
              uses: actions/checkout@v4

            - name: build docker image
              id: build
              run: docker build -t ${{env.IMAGE_NAME}} . || echo "::set-output name=status::failure"
            
            - name: login to dockerhub
              uses: docker/login-action@v3
              with:
                    username: ${{ vars.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: tag image With version number
              run: docker tag ${{env.IMAGE_NAME}} ${{env.IMAGE_NAME}}:${{ github.run_number }}

            - name: push image with version number
              run: docker push ${{env.IMAGE_NAME}}:${{ env.BUILD_NUMBER }}

            - name: push image docker 
              run: docker push ${{env.IMAGE_NAME}}:latest

            - name: Notify Build Results
              if: always()
              uses: act10ns/slack@v2
              with:
                status: ${{ steps.build.outputs.status || job.status }}
                message: |
                  *Docker Build Results* (${{ job.status }})
                  Image: ${{ env.IMAGE_NAME }}:${{ env.BUILD_NUMBER }}
                  ${{ steps.build.outputs.status == 'failure' && ':x: Build failed!' || ':white_check_mark: Build succeeded!' }}
                  ${{ steps.build.outputs.status == 'failure' && 'Check the workflow run for build errors.' || 'Image successfully pushed to Docker Hub.' }}
      

    deployment:
        runs-on: ubuntu-latest
        needs: build-and-push
        steps:
              - name: Notify Deployment Start
                uses: act10ns/slack@v2
                with:
                  status: starting
                  message: |
                    *Starting Deployment*
                    Version: ${{ env.BUILD_NUMBER }}
                    Environment: Development
    
              - name: connect via ssh and execute commands
                id: deploy
                uses: appleboy/ssh-action@v1
                with:
                    host: ${{ secrets.HOST }}
                    username: user
                    password: ${{ secrets.PASSWORD }}
                    script: |
                        cd /home/user/devops-project/back
                        sudo git pull
                        sudo docker compose pull
                        sudo docker compose up -d --force-recreate --remove-orphans || exit 1
                
              - name: Notify Deployment Results
                if: always()
                uses: act10ns/slack@v2
                with:
                    status: ${{ steps.deploy.outcome == 'failure' && 'failure' || 'success' }}
                    channel: "#workflows"
                    message: |
                        *Deployment Results* (${{ job.status }})
                        Version: ${{ env.BUILD_NUMBER }}
                        ${{ steps.deploy.outcome == 'failure' && ':x: Deployment failed!' || ':white_check_mark: Deployment succeeded!' }}
                        ${{ steps.deploy.outcome == 'failure' && 'Check the workflow run for deployment errors.' || 'Application successfully deployed!' }}
                